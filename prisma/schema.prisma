// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Whisper {
  id                String       @id @default(uuid())
  title             String
  userId            String
  user              User         @relation(fields: [userId], references: [id])
  createdAt         DateTime     @default(now())
  fullTranscription String
  audioTracks       AudioTrack[]

  transformations Transformation[]
}

model Transformation {
  id           String   @id @default(uuid())
  whisperId    String
  whisper      Whisper? @relation(fields: [whisperId], references: [id])
  isGenerating Boolean  @default(true)
  typeName     String
  text         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AudioTrack {
  id                   String   @id @default(uuid())
  fileUrl              String
  partialTranscription String
  createdAt            DateTime @default(now())
  whisper              Whisper  @relation(fields: [whisperId], references: [id])
  whisperId            String
  language             String? // Added for language selection
}

// NextAuth.js 认证相关模型
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials provider
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts Account[]
  sessions Session[]
  whispers Whisper[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
